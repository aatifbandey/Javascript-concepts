
Why webpack?

It's like browserify but can split your app into multiple files. If you have multiple pages in a single-page app, the user only downloads code for just that page. If they go to another page, they don't redownload common code.

It often replaces grunt or gulp because it can build and bundle CSS, preprocessed CSS, compile-to-JS languages and images, among other things



// webpack.config.js
module.exports = {
  entry: './main.js',
  output: {
    filename: 'bundle.js'       
  }
};


What are rules in web pack?

Rules are used to define some configuration for loaders like if we use sass we have to install sass-loader, node-sass 
If we are using ES6 we might require babel loader or image loaders
module.exports = {
  entry: './main.js',
  output: {
    filename: 'bundle.js'       
  },
  rules: [
    {
        test: \/.(jpg|png),
        use:[
          'file-loader'
        ]
    },
    {
        test: \/.scss,
        use:[
          'sass-loader', 'node-sass'
        ]
    }
  ]
};

We know browser cache JS/CSS file, now if the content is changed, How to configure JS/html files.
we do this with help of md5 

output: {
    filename: 'bundle.[contenthash].js'  // contenthash will automatically generate some random number       
}
Also if you change the content in JS/CSS file it will also change the hashcode again 


What are Web pack plugins
They run some set of rules based on use of plugin example

How do we clean dist/build folder when we run build?
we use clean-webpack-plugin

How do we minify JS

module.exports = {
  entry: './main.js',
  output: {
    filename: 'bundle.js'       
  },
  plugins:[
      new uglifyJsPlugin(),
      new minifyCssExtractPlgun({
         fileName: 'styles.[contenthash].css'. /// output css
      })
  ]
}

Now we have hash js and css file how do we auto update our index.html or create auto html file
we can use html-webpack-plugin
can configure html and add as many options we want
plugins:[
    new htmlWebPackPlugin({
        title: "My html file",
        fileName: "index.html", // cutsomFileName.html or dist/cutsomFileName.html
        meta:{
          viewport: "width=device-width, initial"
        }
    })
]





//***************//********



How to invoke webpack

Switch to the directory containing webpack.config.js and run:

webpack for building once for development
webpack -p for building once for production (minification)
webpack --watch for continuous incremental build in development (fast!)
webpack -d to include source maps



Optimizing common code

Feed and Profile share a lot in common (like React and the common stylesheets and components). webpack can figure out what they have in common and make a shared bundle that can be cached between pages:

// webpack.config.js

var webpack = require('webpack');

var commonsPlugin =
  new webpack.optimize.CommonsChunkPlugin('common.js');

module.exports = {
  entry: {
    Profile: './profile.js',
    Feed: './feed.js'
  },
  output: {
    path: 'build',
    filename: '[name].js' // Template based on keys in entry above
  },
  plugins: [commonsPlugin]
};

Webpack allows you to split bundles from configuration entries through the CommonsChunkPlugin

The most basic use case for CommonsChunkPlugin is to extract so-called vendor bundle


LOADERS / PLUGINS in Webpack
Loaders enable webpack to process more than just JavaScript files.
At a high level, loaders have two purposes in your webpack configuration:

  The `test` property identifies which file or files should be transformed.
  The `use` property indicates which loader should be used to do the transforming.

While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks. Plugins range from bundle optimization and minification all the way to defining environment-like variables.

In order to used a plugin, you have to require() it and add it to plugins array
  const path = require('path');

  const config = {
    entry: './path/to/my/entry/file.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'my-first-webpack.bundle.js'
    },
    module: {
      rules: [
        { 
          test: /\.txt$/,  // when you come across a path that resolves to a '.txt' file inside of a require()/import statement, 
                           // use the  raw-loader to transform it before you add it to the bundle.
          use: 'raw-loader' 
        }
      ]
    },

    plugins: [
      new webpack.optimize.UglifyJsPlugin(),
      new HtmlWebpackPlugin({template: './src/index.html'})
    ]
  };

  module.exports = config;

Some of the important plugins for performance optimization

    CommonsChunkPlugin 
    The CommonsChunkPlugin is a feature that creates a separate file (known as a chunk).
    By separating common modules from bundles, the resulting chunked file can be loaded once initially, and stored in cache for later use. This results in pagespeed optimizations as the browser can quickly serve the shared code from cache, rather than being forced to load a larger bundle whenever a new page is visited

    new webpack.optimize.CommonsChunkPlugin({
      name: "runtime",
      filename: "js/runtime.[hash].min.js"
    }),



